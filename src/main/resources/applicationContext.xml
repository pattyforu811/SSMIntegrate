<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!-- 引入jdbc.properties -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!-- 配置数据库连接信息，替代mybatis的配置文件mybatis-config.xml -->
    <bean class="com.mchange.v2.c3p0.ComboPooledDataSource" name="dataSource">
        <property name="driverClass" value="${jdbc.driverClass}"/>
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
        <property name="user" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!-- 在spring容器中创建mybatis的核心对象SqlSessionFactroy对象 -->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" name="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 加载mapper.xml文件路径 -->
        <!--<property name="mapperLocations" value="io/pattyforu/dao/*.xml"/>-->
    </bean>

    <!--第三种-->
    <!-- MapperScannerConfigurer：批量生产多个实现类对象 -->
    <!-- 批量生产dao对象在spring容器中id默认值为接口名首字母小写 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="io.pattyforu.dao"/>
    </bean>

    <!-- 开启注解扫描，要扫描的是service和dao层的注解，要忽略web层注解，因为web层让SpringMVC框架去管理 -->
    <context:component-scan base-package="io.pattyforu">
        <!-- 配置要忽略的注解 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

<!--    事务配置-->
<!--    将Spring jdbc 的 DataSourceTransactionManager交给Spring管理-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

<!--    配置事务通知
    id:给事务通知唯一的标识
    transaction-manager：给事务通知提供一个事务管理的引用-->

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- 配置事务的属性 -->
        <tx:attributes>
            <!--
                以方法为单位指定方法应用哪个事务属性

                isolation:用于指定事务的隔离级别，默认值为default，表示使用数据库的默认隔离级别
                no-rollback-for：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时，则事务回滚，没有默认值
                    表示任何异常都回滚
                rollback-for：用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时，则事务不回滚，没有默认值。表示任何异常都回滚
                propagation：用于指定传播行为，。默认值为REQUIRED,表示一定会有事务，一般是增删改的选择，如果是查询，选择SUPPORTS
                read-only：用于指定事务是否只读，只有查询才可以设置为true，默认为false
                timeout：超时时间，默认-1代表永不超时
             -->
            <tx:method name="*" propagation="REQUIRED" read-only="false"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!-- 配置aop-->
    <aop:config>
        <!-- 配置切入点表达式 -->
<!--        <aop:pointcut id="pt" expression="execution(* io.pattyforu.service.impl.*.*(..))" />-->
        <!-- 建立切面:切入点表达式和事务通知的对应关系 -->
<!--        <aop:advisor advice-ref="txAdvice" pointcut-ref="pt"/>-->
        <aop:advisor advice-ref="txAdvice" pointcut="execution(* io.pattyforu.service.impl.*.*(..))"/>
    </aop:config>
</beans>